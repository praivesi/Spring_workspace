+ AOP
  : 여러 객체에 공통적으로 적용할 수 있는 기능을 분리함으로써 재사용을 높여주는 프로그래밍 기법

- target : 실질적인 비즈니스 로직을 구현하고 있는 코드
- jointPoint : 메소드를 호출하는 시점
- advice : jointpoint 에서 실행되어야 하는 코드
           : 횡단관심사 ex) 트랜젝션, 로그인, 보안, 인증

- weaving : advice를 핵심 코드에 삽입하는 것
- pointcut : 여러 jointpoint 를 하나로 결합하는 것
	 :  target 클래스에 advice 가 결합된 떄 이 둘 사이의 규칙을 정의한 것 
  > expression
     * : 모든 값을 표현
     .. : 0개 이상이라는 의미

ex)
  execution(public void set*(..))
  : 리턴 타입이 void 이고 메소드 이름이 set 으로 시작하고 매개변수 0개 이상인 메소드를 호출

1) <aop:before> : 메소드 실행 전 실행
2) <aop:after-returning> : 메소드 실행 후 실행
3) <aop:after-throwing> : 메소드 실행 중 예외 발생 시 실행
4) <aop:after> : 메소드 실행 후 실행 (예외 발생 여부 상관 없이)
5) <aop:around> : 메소드 실행 전/후, 예외 발생 시 실행


AspectJ
1) 코드 적용
2) Compile 할 때 적용

Spring-aop
3) Runtime 시 적용 (Proxy 사용)


+ AspectJ 실습
1. CheckTime2.java
 - logAround() : advice
 - 무기가 사용된 시각을 C:\\log\\aspectj07.txt 파일에 출력

2. app.xml
 - aop 설정
 - pointcut, weaving, around











